import random
from datetime import datetime

def gen_points (n, center):
    """ Generates n points that are describe a u-shape in the return vector. The curve
    is generated by a polynom p of second degree with minimum at the point p(center) 
    where center needs to be in the interval (0, 1) """
    points = [0] * n
    
    p = [0, 0, 0] # a, b, c
    p[0] = random.random () # a
    p[1] = -2 * p[0] * center  # b
    p[2] = (p[1] * p[1] + .1) / (4 * p[0])
    
    dx = 1.0 / n
    x = 0
    for i in range (n):
        points[i] = evaluate_pol (p, x)
        x += dx

    # creates some plain sequence of points 
    j = int (n * random.random ())
    plain_size = int ((n - j) * (random.random () / 4))
    for k in range (plain_size):
        points[j + k] = points[j]

    return points


def evaluate_pol (p, x):
    pot = 1
    result = 0
    for coef in p[::-1]:
        result += coef * pot
        pot *= x
    return result


def input_noise (v, sigma):
    """ Inserts random noise in the points of v with values in
    [-(amplitude / len (v)) * (alpha), (amplitude / len (v)) * (alpha)]  where alpha
    is a random variable with gaussian distribution with mean zero and standard deviation
    sigma """
    curve_amplitude = max (v) - min (v)
    relative_amplitude = curve_amplitude / len (v)
    v[0:len (v)] = map (lambda x: x + ((random.gauss (0, sigma)) * relative_amplitude), v[0:len (v)])


random.seed (datetime.now ())
f = open ('curve_data.txt', 'w')
v = gen_points (100, 1.0 / 2)
input_noise (v, 0)
for x in v:
   f.write (str (x) + "\n")
f.close ()
